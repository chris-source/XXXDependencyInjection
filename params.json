{
  "name": "Xxxdependencyinjection",
  "tagline": "Dependency injection for obj-c",
  "body": "`依赖注入(Dependency Injection)`这个词，源于java，但在Cocoa框架中也是十分常见的。\r\n举例来说：\r\n**UIView的初始化方法initWithFrame**\r\n\r\n```objc\r\n- (id)initWithFrame:(CGRect)frame NS_DESIGNATED_INITIALIZER;\r\n```\r\n\r\n这里的frame传入值，就是所谓的`依赖(Dependency)`，这个View实例化是根据frame注入实现的。\r\n但这种用法有很大的局限性\r\n1. 我们不知道究竟依赖注入的属性有哪些\r\n2. 不可能无限加长方法长度来满足更多的依赖属性\r\n\r\n所以我们准备采用字典容器对NSObject类进行依赖注入扩展。\r\n##给NSObject类添加一个Category\r\n```objc\r\n@interface NSObject (XXXDependencyInjection)\r\n\r\n- (nullable id)initWithParams:(nonnull NSDictionary *)params;\r\n- (void)injection:(nonnull NSDictionary*)params;\r\n\r\n@end\r\n```\r\n##实现注入方法\r\n```objc\r\n- (id)initWithParams:(NSDictionary *)params\r\n{\r\n    self = [self init];\r\n    if (self) {\r\n        [self injection:params];\r\n    }\r\n    return self;\r\n}\r\n\r\n- (void)injection:(NSDictionary*)params\r\n{\r\n    [params.allKeys enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\r\n        SEL selector = NSSelectorFromString([NSString stringWithFormat:@\"set%@%@:\",[[obj substringToIndex:1] uppercaseString],[obj substringFromIndex:1]]);\r\n        id value = [params objectForKey:obj];\r\n        \r\n        \r\n        if ([self respondsToSelector:selector]) {\r\n#pragma clang diagnostic push\r\n#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"\r\n            [self performSelector:selector withObject:value];\r\n#pragma clang diagnostic pop\r\n        }\r\n        else\r\n        {\r\n            @try {\r\n                [self setValue:value forKeyPath:obj];\r\n            }\r\n            @catch (NSException *exception) {\r\n                NSLog(@\"%@\",exception);\r\n                [exception raise];\r\n            }\r\n            @finally {\r\n                \r\n            }\r\n        }\r\n    }];\r\n}\r\n```\r\n\r\n##解释\r\n我们将需要注入的属性，封装到一个字典里，例如：\r\n```objc\r\nUIViewController* controller = [[UIViewController alloc] initWithParams:@{\r\n                               @\"title\":@\"测试\",\r\n                               @\"view.backgroundColor\":[UIColor whiteColor]\r\n                                                                              }];\r\n```\r\n我们给这个VC注入了两个属性，一个是其title，一个是其View的backgroundColor属性。\r\n字典传入以后，我们读区`params.allKeys`进行遍历，拼装set＋参数名的selector，这里用的是NSSelectorFromString方法:\r\n```objc\r\nSEL selector = NSSelectorFromString([NSString stringWithFormat:@\"set%@%@:\",[[obj substringToIndex:1] uppercaseString],[obj substringFromIndex:1]]);\r\n```\r\n然后我们判断实例是否可以响应这个set方法，如果可以，则给其赋值。\r\n```objc\r\n        if ([self respondsToSelector:selector]) {\r\n#pragma clang diagnostic push\r\n#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"\r\n            [self performSelector:selector withObject:value];\r\n#pragma clang diagnostic pop\r\n        }\r\n```\r\n这里的三行clang宏是为了消除编译器的内存泄漏警告，这里因为我们进行了验证，所以不会出现leak。\r\n##KVC实现跨实例赋值\r\n我们注意到上例中还有一句给VC的View改变背景颜色\r\n```objc\r\n  @\"view.backgroundColor\":[UIColor whiteColor]\r\n```\r\n这里就用到了KVC的点语法特性，在我们判断到实例不能响应` if ([self respondsToSelector:selector]) `的时候，通过点语法，进行赋值\r\n```objc\r\n@try {\r\n    [self setValue:value forKeyPath:obj];\r\n}\r\n@catch (NSException *exception) {\r\n    NSLog(@\"%@\",exception);\r\n   [exception raise];\r\n}\r\n@finally {\r\n\r\n}\r\n```\r\n这里添加了异常捕获，因为点语法对属性名称拼写要求是全匹配，否则抛异常，所以要注意。\r\n##优缺点\r\n这样改造过的init方法，优点非常明显，就是绑定更加集中便捷，如果使用的是`storyboard`则可以轻松实现前后端分离。\r\n目前的缺点也很明显，不能告诉开发者哪些属性是必需依赖，另外还不能支持非对象属性的赋值（已经可以，改为setValueforkeyPath方法赋值），希望抛砖引玉，大家来改进这段代码。\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}